name: 'Update Profile README'

on:
  # schedule:
    # - cron: '0 */12 * * *'  # Alle 12 Stunden
  workflow_dispatch:  # Manuelles Triggern

permissions:
  contents: write
  actions: read
  
jobs:
  collect-categories:
    name: 'Generate JSON data'
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Get all public repositories from the organization
        id: repos
        run: |
          organization="${{ github.repository_owner }}"
          repositories_url="https://api.github.com/orgs/$organization/repos?type=public"
          
          # Einlesen der Blacklist
          blacklist=()
          while IFS= read -r line; do
              trimmed_line=$(echo "$line" | xargs)  # Entfernen von führenden/nachfolgenden Leerzeichen
              blacklist+=("$trimmed_line")
          done < ".github/workflows/blacklist.txt"
          
          echo "Fetching all public repositories for \"$organization\"..."
          repositories_response=$(curl -s $repositories_url)
          
          repository_names=$(echo "$repositories_response" | jq -r '.[].name')

          echo "::group:: Found the following repositories"
          echo "$repository_names" | sed 's/[^ ]*/- &/g'
          echo "::endgroup::"
          
          # Initiales JSON-Datenobjekt
          category_data="{
            \"categories\": []
          }"

          echo "Processing repositories..."
          for repository_name in $repository_names; do
              echo "::group:: Processing \"$repository_name\""
              
              # Repository in der Blacklist überspringen
              if [[ " ${blacklist[@]} " =~ " $repository_name " ]]; then
                  echo "::warning:: Ignoring repository \"$repository_name\" due to blacklist."
                  echo "::endgroup::"
                  continue
              fi
              
              repository_url="https://github.com/$organization/$repository_name"
              labels_url="https://api.github.com/repos/$organization/$repository_name/labels"
              
              echo "Fetching labels..."
              labels_response=$(curl -s $labels_url)

              # Alle Kategorien (Labels mit Präfix "category: ") extrahieren
              categories=$(echo "$labels_response" | jq -r '.[] | select(.name | startswith("category: ")) | .name' | sed 's/category: //')

              if [[ -z "$categories" ]]; then
                  echo "::warning:: Ignoring repository \"$repository_name\" because no categories were found."
                  echo "::endgroup::"
                  continue
              fi
              
              echo "Found label categories: $categories"
              
              # Für jede gefundene Kategorie einen Eintrag im JSON hinzufügen
              for category in $categories; do
                  echo "Generating JSON entry for category \"$category\"..."
                  category_data=$(echo "$category_data" | jq \
                    --arg category "$category" \
                    --arg repository_url "$repository_url" \
                    --arg repository_name "$repository_name" \
                    '
                      if (.categories | map(select(.id == $category)) | length > 0) then
                        .categories |= map(
                          if .id == $category then
                            .repositories += [{"url": $repository_url, "name": $repository_name}]
                          else . end
                        )
                      else
                        .categories += [{"id": $category, "repositories": [{"url": $repository_url, "name": $repository_name}]}]
                      end
                    ')
              done
              
              echo "::endgroup::"
          done

          echo "::group:: Done generating JSON data"
          echo "$category_data" | jq .
          echo "::endgroup::"
          
          # Speichern der generierten JSON-Daten in einer Datei
          echo "$category_data" > category_data.json

      - name: Generate README from Template
        run: |
          # Markdown-Templates einlesen
          template_md=$(<"profile/template/readme.md")
          category_template=$(<"profile/template/category.md")
          repository_template=$(<"profile/template/repository.md")
          
          # Generiere den 'categories' Abschnitt
          categories_content=""
          for category in $(jq -r '.categories[].id' category_data.json); do
              # Generiere den 'repositories' Abschnitt für jede Kategorie
              repositories_content=""
              for repo in $(jq -r ".categories[] | select(.id == \"$category\") | .repositories[] | @base64" category_data.json); do
                  _jq() {
                    echo ${repo} | base64 --decode | jq -r ${1}
                  }
                  repo_name=$(_jq '.name')
                  repo_url=$(_jq '.url')
                  
                  # Ersetze den Platzhalter für das Repository
                  repo_markdown=$(echo "$repository_template" | awk -v name="$repo_name" -v url="$repo_url" '{gsub(/\${repository_name}/, name); gsub(/\${repository_url}/, url); print}')
                  repositories_content+="$repo_markdown\n"
              done
              
              # Ersetze den Platzhalter für die Kategorie
              category_markdown=$(echo "$category_template" | awk -v name="$category" -v repos="$repositories_content" '{gsub(/\${category_name}/, name); gsub(/\${repositories}/, repos); print}')
              categories_content+="$category_markdown\n"
          done
          
          # Ersetze den Platzhalter ${categories} im Haupttemplate
          final_md=$(echo "$template_md" | awk -v categories="$categories_content" '{gsub(/\${categories}/, categories); print}')

          echo "::group:: Done generating Markdown file"
          echo -e $final_md
          echo "::endgroup::"
          
          # Speichere das endgültige README
          echo "$final_md" > "profile/README.md"
