name: Collect Repository Categories

on:
  workflow_dispatch:  # Manuelles Triggern

jobs:
  collect-categories:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Get all public repositories from the organization
        id: repos
        run: |
          org="Datapack-Registry"  # Name der Organisation
          repos_url="https://api.github.com/orgs/$org/repos?type=public"
          
          # Blacklist definieren
          blacklist=("Template" "default")

          # Fetch all public repositories
          repos_response=$(curl -s $repos_url)
          
          # Filtern, dass wir nur öffentliche Repositories bekommen
          repo_names=$(echo "$repos_response" | jq -r '.[].name')

          category_data="{
            \"categories\": []
          }"

          for repo_name in $repo_names; do
              # Repository auf Blacklist prüfen
              if [[ " ${blacklist[@]} " =~ " $repo_name " ]]; then
                  echo "Ignoring repository $repo_name due to blacklist"
                  continue
              fi

              repo_url="https://github.com/$org/$repo_name"
              labels_url="https://api.github.com/repos/$org/$repo_name/labels"

              # Abrufen der Labels für das Repository
              labels_response=$(curl -s $labels_url)
              
              # Prüfen, ob Labels vorhanden sind, und die Kategorie extrahieren
              category=$(echo "$labels_response" | jq -r '.[] | select(.name | startswith("category: ")) | .name' | sed 's/category: //')

              if [[ -z "$category" ]]; then
                  echo "No category found for repository $repo_name"
                  continue
              fi

              # Kategorie-Daten zur JSON hinzufügen
              category_data=$(echo "$category_data" | jq \
                --arg category "$category" \
                --arg repo_url "$repo_url" \
                --arg repo_name "$repo_name" \
                '
                  if (.categories | map(select(.id == $category)) | length > 0) then
                    .categories |= map(
                      if .id == $category then
                        .repositories += [{"url": $repo_url, "name": $repo_name}]
                      else . end
                    )
                  else
                    .categories += [{"id": $category, "repositories": [{"url": $repo_url, "name": $repo_name}]}]
                  end
                ')

          done

          # JSON-Datei speichern
          echo "$category_data" > category_data.json

      - name: Upload the JSON file
        uses: actions/upload-artifact@v4
        with:
          name: category-data
          path: category_data.json
