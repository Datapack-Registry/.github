name: Collect and Generate Profile README

on:
  # schedule:
    # - cron: '0 */12 * * *'  # Alle 12 Stunden
  workflow_dispatch:  # Manuelles Triggern

jobs:
  collect-categories:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Get all public repositories from the organization
        id: repos
        run: |
          org="${{ github.repository_owner }}"
          repos_url="https://api.github.com/orgs/$org/repos?type=public"
          
          blacklist=("Template" "default")

          # Fetch all public repositories
          repos_response=$(curl -s $repos_url)
          
          # Filtern, dass wir nur öffentliche Repositories bekommen
          repo_names=$(echo "$repos_response" | jq -r '.[].name')

          category_data="{
            \"categories\": []
          }"

          for repo_name in $repo_names; do
              # Repository auf Blacklist prüfen
              if [[ " ${blacklist[@]} " =~ " $repo_name " ]]; then
                  echo "Ignoring repository $repo_name due to blacklist"
                  continue
              fi

              repo_url="https://github.com/$org/$repo_name"
              labels_url="https://api.github.com/repos/$org/$repo_name/labels"

              labels_response=$(curl -s $labels_url)
              
              category=$(echo "$labels_response" | jq -r '.[] | select(.name | startswith("category: ")) | .name' | sed 's/category: //')

              if [[ -z "$category" ]]; then
                  echo "No category found for repository $repo_name"
                  continue
              fi

              category_data=$(echo "$category_data" | jq \
                --arg category "$category" \
                --arg repo_url "$repo_url" \
                --arg repo_name "$repo_name" \
                '
                  if (.categories | map(select(.id == $category)) | length > 0) then
                    .categories |= map(
                      if .id == $category then
                        .repositories += [{"url": $repo_url, "name": $repo_name}]
                      else . end
                    )
                  else
                    .categories += [{"id": $category, "repositories": [{"url": $repo_url, "name": $repo_name}]}]
                  end
                ')

          done

          echo "$category_data" > category_data.json

      - name: Load README Template
        id: load_readme_template
        run: |
          readme_template=$(cat profile/template/readme.md)
          echo "$readme_template" > profile/README.md

      - name: Load Category Template
        id: load_category_template
        run: |
          category_template=$(cat profile/template/category.md)

      - name: Load Repository Template
        id: load_repository_template
        run: |
          repository_template=$(cat profile/template/repository.md)

      - name: Create README from categories data
        run: |
          categories=$(cat category_data.json | jq -r '.categories[]')

          template=$(cat profile/README.md)

          for category in $(echo "$categories" | jq -r '.id'); do
            category_name=$category
            repositories=$(echo "$categories" | jq -r ".[] | select(.id == \"$category_name\") | .repositories[] | \"$repository_template\"")

            category_section=$(echo "$category_template" | sed "s/\${category_name}/$category_name/" | sed "s/\${repositories}/$repositories/")

            template="$template$category_section"
          done

          echo -e "$template" > profile/README.md

      - name: Commit and push changes to README
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add profile/README.md
          git commit -m "Update profile README with latest repositories"
          git push origin main
